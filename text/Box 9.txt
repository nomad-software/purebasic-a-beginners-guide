Arrays And Linked Lists Are Passed By Reference

Unlike variables, arrays and linked lists are passed by reference. This means that values aren’t actually passed from arrays and linked lists into the procedures and ‘copied’ into the parameters. Instead an internal memory pointer is passed to the procedure and this is used to manipulate the array or linked list.

This is all done internally so you wouldn’t really notice anything different from using variables. The only thing you need to consider is that when you pass an array or linked list into a procedure, the parameter name used will not be a separate local array or linked list. Whatever name you give to the array or linked list parameter inside the procedure, you are still manipulating the original passed array or linked list.

For example, if you pass an array called ‘Dogs()’ into a procedure as a parameter, this parameter could have a different name and be called ‘Cats()’ for instance. Then inside the procedure you could assign the ‘Cats()’ array different values. When the procedure exits you will notice that the ‘Dogs()’ array has been modified in the same way as the ‘Cats()’ array. This is because the ‘Cats()’ parameter will be just a reference to the original passed ‘Dogs()’ array.

This is only true for arrays and linked lists, variables on the other hand are passed by value, meaning that an actual value is copied into the variable parameter. So, if you alter a variable parameter in a procedure, it will not alter the original variable that was passed to it.